program       -> declaration* EOF ;

declaration   -> letDecl | 
                   defDecl | 
                   classDecl | 
                   statement ;

letDecl       -> "let" IDENTIFIER ( "=" expression )? ";" ;
defDecl       -> "def" function ;
classDecl     -> "class" IDENTIFIER ( "extends" IDENTIFIER )?
                    "{" function* "}" ;

function      -> IDENTIFIER "(" parameters? ")" block ;
parameters    -> IDENTIFIER ( "," IDENTIFIER )* ;

statement     = exprStmt | 
                  printStmt |
                  block | 
                  ifStmt | 
                  whileStmt |
                  forStmt |
                  returnStmt

block         = "{" declaration "}"

ifStmt        = "if" "(" statement ")" statement
whileStmt     = "while" "(" expression ")" statement      
forStmt       = "for" "(" 
                  ( letDecl | exprStmt )
                   expression ";" 
                   expression ")" statement ; 
returnStmt    = "return" expression? ";"  

exprStmt      = expression ";"
printStmt     = "print" expression ";"

expression    = assignment | compoundAssignment | increDecre

assignment    = ( call "." )? IDENTIFIER "=" assignment | equality

compoundAssignment = IDENTIFIER ( "+=" | "-=" ) equality ";"
increDecre    = IDENTIFIER ( "++" | "--" ) ";"

equality      = comparison ( ( "!=" | "==" ) comparison )*

comparison    = term ( ( ">" | ">=" | "<" | "<=" ) term )*

term          = factor ( ( "-" | "+" ) factor )* 

factor        = unary ( ( "/" | "*" ) unary )* 

unary         = ( "!" | "-" ) unary 
                  | call

call          = literal ( "(" arguments? ")" | "." IDENTIFIER )*

arguments     = expression ( "," expression )*

literal       = NUMERIC | STRING | TERMINAL 
                  | "this" | "true" | "false" | "this"
                  | "(" expression ")"
                  | IDENTIFIER
                  | "super" "." IDENTIFIER